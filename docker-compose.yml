version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: webcore_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: webcore_dev
      POSTGRES_USER: webcore
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - webcore_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U webcore -d webcore_dev"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: webcore_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - webcore_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API
  server:
    build:
      context: ./server
      dockerfile: Dockerfile
      target: development
    container_name: webcore_server
    restart: unless-stopped
    environment:
      NODE_ENV: development
      DATABASE_URL: postgresql://webcore:password@postgres:5432/webcore_dev
      REDIS_URL: redis://redis:6379
      JWT_SECRET: dev-jwt-secret-change-in-production
      REFRESH_TOKEN_SECRET: dev-refresh-secret-change-in-production
    ports:
      - "3000:3000"
      - "9229:9229" # Debug port
    volumes:
      - ./server:/app
      - /app/node_modules
      - ./storage:/app/storage
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - webcore_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend Client
  client:
    build:
      context: ./client
      dockerfile: Dockerfile
      target: development
    container_name: webcore_client
    restart: unless-stopped
    environment:
      VITE_API_URL: http://localhost:3000/api
    ports:
      - "5173:5173"
    volumes:
      - ./client:/app
      - /app/node_modules
    depends_on:
      - server
    networks:
      - webcore_network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: webcore_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/default.conf:/etc/nginx/conf.d/default.conf
      - ./storage/ssl:/etc/nginx/ssl
    depends_on:
      - server
      - client
    networks:
      - webcore_network

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: webcore_prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - webcore_network

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: webcore_grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - prometheus
    networks:
      - webcore_network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  webcore_network:
    driver: bridge
